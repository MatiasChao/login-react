{"version":3,"sources":["components/auth/LoginReducer.jsx","constants.js","components/auth/Login.jsx","components/Home.jsx","components/User.jsx","components/Public.jsx","App.js","serviceWorker.js","index.js"],"names":["state","action","type","message","error","authenticated","userLogged","user","Login","props","initialState","token","localStorage","getItem","useReducer","LoginReducer","dispatch","useState","email","password","setUser","onChange","e","target","name","value","getUserLogged","a","axios","get","headers","userInfo","data","history","push","pathname","login","preventDefault","trim","post","result","setItem","className","style","backgroundColor","onSubmit","placeholder","border","width","color","Home","setUserLogged","useEffect","height","paddingTop","location","onClick","logout","removeItem","fontSize","User","Public","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","console"],"mappings":"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","file":"static/js/main.cb632d1d.chunk.js","sourcesContent":["import {\n    SUCCESS_LOGIN,\n    ERROR_LOGIN,\n    GET_USER,\n    LOGOUT\n} from '../../constants'\n\nexport default (state, action) => {\n    switch(action.type) {\n        case ERROR_LOGIN:\n            return {\n                ...state,\n                message: action.message? action.message : 'Error a iniciar sesión',\n                error: true\n            }\n        case SUCCESS_LOGIN: \n            return {\n                ...state,\n                authenticated: true,\n                error: false\n            }\n        case GET_USER:\n            return {\n                ...state,\n                userLogged: action.user\n            }\n        default:\n            return state\n    }\n}","export const SUCCESS_LOGIN = 'SUCCESS_REGISTER'\nexport const ERROR_LOGIN = 'ERROR_REGISTER'\nexport const GET_USER = 'GET_USER'\nexport const LOGOUT = 'LOGOUT'\n","import React, { Fragment, useState, useReducer } from 'react'\nimport axios from 'axios'\nimport {\n    SUCCESS_LOGIN,\n    ERROR_LOGIN,\n    GET_USER,\n    LOGOUT\n} from '../../constants'\nimport LoginReducer from './LoginReducer'\nimport './Login.scss'\n\n\nconst Login = (props) => {\n\n    const initialState = {\n        token: localStorage.getItem('token'),\n        authenticated: null,\n        userLogged: null,\n        message: null,\n        error: false\n    }\n\n    const [state, dispatch] = useReducer(LoginReducer, initialState)\n\n    const [user, setUser] = useState({\n        email: '',\n        password: ''\n    })\n\n    const { email, password } = user\n\n    const onChange = e => {\n        setUser({\n            ...user,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const getUserLogged = async (token) => {\n        const userInfo = await axios.get('http://localhost:4000/api/users', {\n            headers: {\n                'x-auth-token': token\n            }\n        })\n        if(userInfo) {\n            dispatch({type: GET_USER, user: userInfo.data.user})\n        }\n\n        props.history.push({\n            pathname: '/home',\n            state: { data: userInfo.data.user }\n        })\n    }\n\n    const login = async e => {\n        e.preventDefault()\n\n        if(email.trim() === '' || password.trim() === '') {\n            dispatch({ type: ERROR_LOGIN, message: 'El email y/o password no pueden ser vacios' })\n            return\n        }\n\n        try {\n            const result = \n                await axios.post('http://localhost:4000/api/auth', user)\n            if(result) {\n                localStorage.setItem(\"token-myapp\", result.data.token)\n                dispatch({ type: SUCCESS_LOGIN })\n                getUserLogged(result.data.token)\n            }\n        } catch (error) {\n            dispatch({ type: ERROR_LOGIN })\n        }\n    \n    }\n\n    return (\n        <Fragment>\n            <div className=\"container d-flex justify-content-center\" style={{backgroundColor: '#6A62D2'}}>\n                <div className=\"form-container mt-5 mb-5 p-3 text-center\">\n                    <h5 className=\"m-2 mb-3\"> SIGN IN TO YOUR ACCOUNT </h5>\n\n                    <form onSubmit={login}>\n                        <div className=\"mb-2\">\n                            <input type=\"text\" placeholder=\"email\" className=\"p-2\"\n                                value = { email } name = \"email\" style={{backgroundColor: '#E5E8ED', border: 'none', width: '90%' }}\n                                onChange = { e => onChange(e) } />\n                        </div>\n\n                        <div className=\"\">\n                            <input type=\"password\" placeholder=\"password\" className=\"p-2\"\n                                value = { password } name = \"password\" style={{backgroundColor: '#E5E8ED', border: 'none', width: '90%' }}\n                                onChange = { e => onChange(e) }  />\n                        </div>\n\n                        <div>\n                            <input type=\"submit\" className=\"mt-4 p-2\" value=\"SIGN IN\" style={{ backgroundColor: '#6A62D2', border: 'none', color: '#fff', width: '90%' }}/>\n                        </div>\n\n                        {\n                            state.error && \n                            <div className=\"mt-2\" style={{color: 'red'}}>\n                                <p>{state.message}</p>\n                            </div>\n                        }\n                    </form>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Login","import React, { useEffect, useState } from 'react'\n\nconst Home = (props) => {\n\n    const [userLogged, setUserLogged] = useState(false)\n\n    useEffect(() => {\n        if(!localStorage.getItem('token-myapp')){\n            props.history.push('/login');\n        } else {\n            setUserLogged(true)\n        }\n    }, [])\n\n    const logout = () => {\n        // borrar token del storage\n        localStorage.removeItem('token-myapp')\n\n        // redirigir a Login\n        props.history.push('/login');  \n    }\n\n    return (\n        <div className=\"container h-500\" style={{backgroundColor: '#6A62D2'}}>\n            <div className=\"text-center\" style={{height: '700px', paddingTop: '200px'}}>\n                <h5 className=\"mb-5\" style={{color: 'white'}}>URL:  /home</h5>\n                <h5 className=\"mb-3\" style={{color: 'white'}}> { userLogged && props.location.state.data.name } </h5>\n\n                <button onClick={() => logout()} className=\"p-2 pl-5 pr-5\" style={{backgroundColor: '#746BDE', border: 'none', color: 'white', width: '200px', fontSize: '14px'}}>\n                    LOG OUT\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Home","import React, { useEffect } from 'react'\n\nconst User = (props) => {\n\n    useEffect(() => {\n        if(!localStorage.getItem('token-myapp')){\n            props.history.push('/login');\n        }\n    }, [])\n\n    return (\n        <div className=\"container h-500\" style={{backgroundColor: '#6A62D2'}}>\n            <div className=\"text-center\" style={{height: '700px', paddingTop: '200px'}}>\n                <h5 className=\"mb-5\" style={{color: 'white'}}>URL:  /user</h5>\n            </div>\n        </div>\n    )\n    \n}\n\n\nexport default User","import React from 'react'\n\nconst Public = () => {\n    return (\n        <div className=\"container h-500\" style={{backgroundColor: '#6A62D2'}}>\n            <div className=\"text-center\" style={{height: '700px', paddingTop: '200px'}}>\n                <h5 className=\"mb-5\" style={{color: 'white'}}>URL:  /public</h5>\n            </div>\n        </div>\n    )  \n}\n\n\nexport default Public","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport Login from '../src/components/auth/Login'\nimport Home from './components/Home'\nimport User from './components/User'\nimport Public from './components/Public'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/login\" component={ Login } />\n          <Route exact path=\"/home\" component={ Home } />\n          <Route exact path=\"/user\" component={ User } />\n          <Route exact path=\"/public\" component={ Public } />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}